---
import '@styles/global.css';

interface Props {
    siteTitle: string;
    coverImageUrl: URL;
}

const {siteTitle, coverImageUrl} = Astro.props;

const coverImageLightUrl = `linear-gradient(rgba(255, 255, 255, 0.55), rgba(255, 255, 255, 0.55)),url(${coverImageUrl.toString()})`;
const coverImageDarkUrl = `linear-gradient(rgba(0, 0, 0, 0.55), rgba(0, 0, 0, 0.55)),url(${coverImageUrl.toString()})`;
---

<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width"/>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg"/>
    <meta name="generator" content={Astro.generator}/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <style data-emotion-insertion-point="emotion"></style>
    <title>{siteTitle}</title>
</head>
<body>
<div class="solitude-body"></div>
<slot/>
</body>
</html>

<style define:vars={{coverImageLightUrl, coverImageDarkUrl}}>
    .solitude-body {
        top              : 0;
        left             : 0;
        position         : fixed;
        z-index          : -10;
        height           : 100vh;
        width            : 100vw;
        background-size  : cover;
        background-image : var(--coverImageLightUrl);
    }

    .dark .solitude-body {
        background-image : var(--coverImageDarkUrl);
    }
</style>

<script is:inline>
    const storedTheme = localStorage.getItem('theme');
    const themeMode = storedTheme ? JSON.parse(storedTheme).state.themeMode : 'dark';
    document.documentElement.classList.add(themeMode)

    window.addEventListener("themeModeChanged", function (e) {
        const isDark = e.detail.newValue === "dark";
        document.documentElement.classList.toggle('dark', isDark);
        document.documentElement.classList.toggle('light', !isDark);
    });
</script>